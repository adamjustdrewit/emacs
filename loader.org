

#+TITLE: Emacs Config
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Set Safe
#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "73a13a70fd111a6cd47f3d4be2260b1e4b717dbf635a9caee6442c949fad41cd" "3eb93cd9a0da0f3e86b5d932ac0e3b5f0f50de7a0b805d4eb1f67782e9eb67a4" "b59d7adea7873d58160d368d42828e7ac670340f11f36f67fa8071dbf957236a" "0cd56f8cd78d12fc6ead32915e1c4963ba2039890700458c13e12038ec40f6f5" "946e871c780b159c4bb9f580537e5d2f7dba1411143194447604ecbaf01bd90c" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "84d2f9eeb3f82d619ca4bfffe5f157282f4779732f48a5ac1484d94d5ff5b279" "dbc36265f8078e5b36e907b7753cd5b538f702f9f1be398d17ff9c5b442fe8cf" "a6e5edd129bc48c9540ab6ed4a76a2e4e0da6359e981a3ec0bffbeb4416d4cc9" "365d9553de0e0d658af60cff7b8f891ca185a2d7ba3fc6d29aadba69f5194c7f" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088"default)))
 '(electric-pair-mode t)
 '(package-selected-packages
   (quote
    (org-jira org-bullets all-the-icons-dired all-the-icons auto-complete projectile neotree dashboard spaceline spacemacs-theme ace-window which-key sublimity counsel swiper bm airline-themes rainbow-delimiters csharp-mode eldoc-eval evil-anzu use-package evil f smart-mode-line-powerline-theme smart-mode-line auto-dim-other-buffers nlinum-hl solaire-mode nlinum monokai-theme doom-themes yasnippet powershell ox-twbs paredit org-jira org-bullets all-the-icons-dired all-the-icons auto-complete projectile neotree dashboard spaceline spacemacs-theme ace-window which-key sublimity counsel swiper bm)))
 '(safe-local-variable-values
   (quote
    ((org-todo-keyword-faces
      ("TODO" . "red")
      ("STARTED" . "green")
      ("WAITING" . "orange")
      ("DONE" . "cyan")
      ("CANCELED" . "hot pink")))))
 '(which-key-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :foreground "#b2b2b2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "outline" :family "Source Code Pro")))))
#+end_src
* Set Username and email
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Adam Drew")
  (setq user-mail-address "adamdrew1991@googlemail.com")
#+END_SRC

#+RESULTS:
: adamdrew1991@googlemail.com

* Packages

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/"))
#+end_src

** bm
#+begin_src emacs-lisp
(require 'bm)
(global-set-key (kbd "<C-f2>") 'bm-toggle)
(global-set-key (kbd "<f2>")   'bm-next)
(global-set-key (kbd "<S-f2>") 'bm-previous)
#+end_src
** Swiper/Councel/Ivy
#+begin_src emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "M-i") 'counsel-imenu)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
#+end_src

** Sublimity
#+begin_src emacs-lisp
(require 'sublimity)
(require 'sublimity-scroll)
(sublimity-mode 1)
#+end_src
** Dashboard
#+BEGIN_SRC emacs-lisp


;;)

(require 'dashboard)
(setq dashboard-banner-logo-title "")
(setq dashboard-startup-banner 2)
(dashboard-setup-startup-hook)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (agenda . 5)))

#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Add agenda files
(setq org-agenda-files (list "~/.org/" "~/.org-jira/" ))
;; list 
;;(add-to-list 'org-agenda-files "C:/Data/Org/")
(setq org-todo-keyword-faces '(("TODO" . "tomato") ("STARTED" . "deep sky blue") ("WAITING" . "linen") ("DONE" . "dark sea green") ("CANCELED" . "hot pink") ("DELEGATED" . "DarkOrchid1" )))
  (setq org-todo-keywords
       '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)" "DELEGATED(D)")))


#+END_SRC

** Ace-window
#+begin_src emacs-lisp
(require 'ace-window)
(global-set-key (kbd "M-p") 'ace-window)
#+end_src

** Electric pair
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC
** All-the-icons
#+BEGIN_SRC emacs-lisp
(require 'all-the-icons)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC
** Auto-complete
#+BEGIN_SRC emacs-lisp
(defun auto-complete-mode-maybe ()
  "No maybe for you. Only AC!"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1)))

(global-auto-complete-mode t)
(global-set-key (kbd "M-SPC") 'auto-complete)
#+END_SRC
** Custom
#+BEGIN_SRC emacs-lisp
(defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'iwb)

(defun live-coding ()
    (interactive)
    (set-face-attribute 'default nil :font "Source Code Pro")
    (add-hook 'prog-mode-hook 'command-log-mode)
    )
#+END_SRC

#+RESULTS:
: iwb

** EDiff
#+BEGIN_SRC emacs-list
(defun my/emerge (local remote base output)
  (emerge-files-with-ancestor nil local remote base output nil 'my/emerge--close-current-frame))

(defun my/emerge--close-current-frame ()
  "Close the current frame, duh"
  ;; This is simple enough to be a lamdba, however, that would make 
  ;; EMERGE-FILES-WITH-ANCESTOR look ugly, I prefer keeping 
  ;; arguments in one line, if possible.
  (delete-frame (selected-frame)))
#+END_SRC
** YaSnippet
#+begin_src emacs-lisp :tangle yes
(require 'yasnippet)
(yas-global-mode 1)
(global-set-key (kbd "C-c i") 'yas-insert-snippet)
#+end_src
** Other Bindings
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c l") 'nlinum-mode)
(global-set-key (kbd "C-x C-a") 'eval-region)
(global-set-key (kbd "C-c C-x j") 'org-agenda)
#+end_src

* Language
** lisp
#+begin_src emacs-lisp
 (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    
;; paredit mode
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'cider-repl-mode-hook #'enable-paredit-mode)

;; rainbow delimiters
(add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
(add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)
(add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
(add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
(add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
(add-hook 'lisp-interaction-mode-hook #'rainbow-delimiters-mode)
(add-hook 'scheme-mode-hook #'rainbow-delimiters-mode)
#+end_src


* Appearance
#+BEGIN_SRC emacs-lisp


(require 'solaire-mode)
(custom-set-faces '(linum ((t (:inherit default)))))

(setq powerline-utf-8-separator-left        #xe0b0
      powerline-utf-8-separator-right       #xe0b2
      airline-utf-glyph-separator-left      #xe0b0
      airline-utf-glyph-separator-right     #xe0b2
      airline-utf-glyph-subseparator-left   #xe0b1
      airline-utf-glyph-subseparator-right  #xe0b3
      airline-utf-glyph-branch              #xe0a0
      airline-utf-glyph-readonly            #xe0a2
      airline-utf-glyph-linenumber          #xe0a1)

(require 'airline-themes)
(load-theme 'airline-doom-molokai)

;; brighten buffers (that represent real files)
(add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)

;; ...if you use auto-revert-mode:
(add-hook 'after-revert-hook #'turn-on-solaire-mode)

;; You can do similar with the minibuffer when it is activated:
(add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)

;; To enable solaire-mode unconditionally for certain modes:
(add-hook 'ediff-prepare-buffer-hook #'solaire-mode)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "outline" :family "Source Code Pro")))))


(set-frame-parameter (selected-frame) 'alpha '(97 . 80))
 (add-to-list 'default-frame-alist '(alpha . (97 . 80)))
(load-theme 'monokai t)
(require 'nlinum)

(set-face-foreground 'linum "#717061")
(set-face-background 'linum "#2F3330")

(set-face-foreground 'cursor "#F2295D")
(set-face-background 'cursor "#F93B8E")


(setq org-src-fontify-natively t)
;; (load "~/mode-theme.el")

#+END_SRC
* General
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
 (setq inhibit-startup-message t)
#+end_src
#+begin_src emacs-lisp
  ;; Backup settings
  (defvar --backup-directory (concat init-dir "backups"))

  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))

  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
    (setq delete-by-moving-to-trash t
          trash-directory "~/.Trash/emacs")

    (setq backup-directory-alist `(("." . ,(expand-file-name
                                            (concat init-dir "backups")))))
#+end_src

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
(transient-mark-mode t)
(setq x-select-enable-clipboard t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq echo-keystrokes 0.1
      use-dialog-box nil
      visible-bell t)
(show-paren-mode t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(defun my-bell-function ())

  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)

(server-start)
#+END_SRC
